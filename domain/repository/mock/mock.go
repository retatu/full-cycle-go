// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransacationRepository is a mock of TransacationRepository interface.
type MockTransacationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransacationRepositoryMockRecorder
}

// MockTransacationRepositoryMockRecorder is the mock recorder for MockTransacationRepository.
type MockTransacationRepositoryMockRecorder struct {
	mock *MockTransacationRepository
}

// NewMockTransacationRepository creates a new mock instance.
func NewMockTransacationRepository(ctrl *gomock.Controller) *MockTransacationRepository {
	mock := &MockTransacationRepository{ctrl: ctrl}
	mock.recorder = &MockTransacationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransacationRepository) EXPECT() *MockTransacationRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockTransacationRepository) Insert(id, accountId string, amount float64, status, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", id, accountId, amount, status, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTransacationRepositoryMockRecorder) Insert(id, accountId, amount, status, errorMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTransacationRepository)(nil).Insert), id, accountId, amount, status, errorMessage)
}
